{"version":3,"sources":["App.tsx","components/Header.tsx","components/Footer.tsx","containers/Home.tsx","containers/About.tsx","containers/404.tsx","serviceWorker.ts","index.tsx"],"names":["App","basename","className","path","exact","component","Home","About","NoRouteMatch","Component","hot","module","Header","Footer","width","height","src","alt","to","Is404","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","waitingServiceWorker","waiting","addEventListener","event","target","postMessage","type"],"mappings":"wQAYMA,G,uLAEF,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,yBAAKC,UAAU,OACb,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,MACjC,kBAAC,IAAD,CAAOH,KAAK,SAASE,UAAWE,MAChC,kBAAC,IAAD,CAAOF,UAAWG,OAGpB,kBAAC,IAAD,Y,GAbQC,cAoBHC,kBAAIC,EAAJD,CAAYV,K,qDChC3B,oBAMeY,IAJA,WACb,OAAO,4C,gCCHT,oBAMeC,IAJA,WACb,OAAO,4C,gCCHT,2BAqBeP,IAlBF,WACX,OACE,yBAAKJ,UAAU,QACb,sCACA,mEACA,mDACA,yBACEY,MAAM,OACNC,OAAO,OACPC,IAAI,kFACJC,IAAI,KAEN,gDACA,kBAAC,IAAD,CAAMC,GAAG,UAAT,kB,gCChBN,2BAaeX,IAVD,WACZ,OACE,yBAAKL,UAAU,SACb,uCACA,sDACA,kBAAC,IAAD,CAAMgB,GAAG,KAAT,iB,gCCRN,oBAMeC,IAJD,WACZ,OAAO,2C,0KCSHC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA2CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC/FjEC,IAASC,OAAO,kBAAC/C,EAAA,EAAD,MAASgD,SAASC,eAAe,SDqB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,uBAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAIF,IAAM1B,EAAK,UAAMwB,uBAAN,sBAEP/B,IAgER,SAAiCO,EAAeC,GAE9C0B,MAAM3B,EAAO,CACX4B,QAAS,CAAC,iBAAkB,YAE3BvB,MAAK,SAACwB,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAACC,GAClCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFFuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,IC5C7BE,CAAuB,CACrBY,SAAU,SAACT,GACT,IAAMgC,EAAuBhC,EAAaiC,QAMtCD,IACFA,EAAqBE,iBACnB,eACA,SAACC,GACKA,EAAMC,QAAiC,cAAvBD,EAAMC,OAAO/B,OAC/BhB,OAAOC,SAASwC,YAItBE,EAAqBK,YAAY,CAACC,KAAM,uB","file":"static/js/main.f61b7aa2.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {HashRouter, Route, Switch} from 'react-router-dom';\r\nimport {hot} from 'react-hot-loader';\r\n\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Home from './containers/Home';\r\nimport About from './containers/About';\r\nimport NoRouteMatch from './containers/404';\r\n\r\nimport './stylesheets/main.scss';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename=\"/\">\r\n        <div className=\"App\">\r\n          <Header />\r\n\r\n          <Switch>\r\n            <Route path=\"/\" exact component={Home} />\r\n            <Route path=\"/about\" component={About} />\r\n            <Route component={NoRouteMatch} />\r\n          </Switch>\r\n\r\n          <Footer />\r\n        </div>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default hot(module)(App);\r\n","import React from 'react';\r\n\r\nconst Header = () => {\r\n  return <header>Header</header>;\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return <footer>Footer</footer>;\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <div>/home</div>\r\n      <h1>This is the [Typescript] Home page.</h1>\r\n      <h2>service-worker test</h2>\r\n      <img\r\n        width=\"100%\"\r\n        height=\"auto\"\r\n        src=\"https://cdn.shopify.com/s/files/1/2327/5701/articles/Omega-3-For-Dogs_1200x.jpg\"\r\n        alt=\"\"\r\n      />\r\n      <div>This is a doggo</div>\r\n      <Link to=\"/about\">Go to About</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div className=\"about\">\r\n      <div>/about</div>\r\n      <h1>This is the About page</h1>\r\n      <Link to=\"/\">Go to Home</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\n\r\nconst Is404 = () => {\r\n  return <div>404 page</div>;\r\n};\r\n\r\nexport default Is404;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    // window.addEventListener('load', () => {\r\n    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n    if (isLocalhost) {\r\n      // This is running on localhost. Let's check if a service worker still exists or not.\r\n      checkValidServiceWorker(swUrl, config);\r\n\r\n      // Add some additional logging to localhost, pointing developers to the\r\n      // service worker/PWA documentation.\r\n      navigator.serviceWorker.ready.then(() => {\r\n        console.log(\r\n          'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n        );\r\n      });\r\n    } else {\r\n      // Is not localhost. Just register service worker\r\n      registerValidSW(swUrl, config);\r\n    }\r\n    // });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: {'Service-Worker': 'script'},\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register({\r\n  onUpdate: (registration) => {\r\n    const waitingServiceWorker = registration.waiting;\r\n\r\n    interface ServiceWorkerEvent extends Event {\r\n      target: (Partial<ServiceWorker> & EventTarget) | null;\r\n    }\r\n\r\n    if (waitingServiceWorker) {\r\n      waitingServiceWorker.addEventListener(\r\n        'statechange',\r\n        (event: ServiceWorkerEvent) => {\r\n          if (event.target && event.target.state === 'activated') {\r\n            window.location.reload();\r\n          }\r\n        }\r\n      );\r\n      waitingServiceWorker.postMessage({type: 'SKIP_WAITING'});\r\n    }\r\n  },\r\n});\r\n"],"sourceRoot":""}